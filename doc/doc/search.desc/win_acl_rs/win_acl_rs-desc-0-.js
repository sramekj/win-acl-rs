searchState.loadedDescShard("win_acl_rs", 0, "A simple and safe abstraction over Windows ACLs (Access …\nAccess Control List (ACL) operations.\nCalls LocalFree and asserts no errors\nthis module exposes functions that require elevated …\nError definitions for Windows API operations.\nAccess mask utilities and reexports.\nSecurity Descriptor operations.\nSecurity Identifier (SID) operations.\nTrustee representation for Windows security APIs.\nWell-known Security Identifiers (SIDs).\nWindows api call that returns boolean result\nWindows api call that returns error code result\nAn ACE that grants access rights to a security principal.\nAn ACE that explicitly denies access rights to a security …\nAn Access Control Entry (ACE) within an ACL.\nThe type of an Access Control Entry (ACE).\nAn Access Control List (ACL) containing zero or more …\nAn iterator over the ACEs in an ACL.\nAn ACE used for system auditing, generating audit logs …\nAn unknown ACE type with the raw byte value.\nReturns the number of ACEs in this ACL.\nReturns the type of this ACE (allowed, denied, audit, …\nAdds an access-allowed ACE to the ACL.\nAdds an access-denied ACE to the ACL.\nCreates a new empty ACL with default capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>Acl</code> from a raw Windows ACL pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the ACL structure is valid.\nReturns the access mask from this ACE.\nCreates a new empty ACL.\nRemoves the ACE at the given index.\nExtracts the SID (Security Identifier) from this ACE.\nCreates a new empty ACL with the specified capacity.\nMarker type representing an elevated privilege context.\nA marker trait for privilege levels.\nA type alias for an unprivileged privilege token.\nRepresents a privilege token with a specific privilege …\nA type alias for an elevated security descriptor.\nMarker type representing an unprivileged context.\nDrops elevated privileges and returns to an unprivileged …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the current process is running with …\nCreates a new unprivileged token.\nAttempts to elevate privileges to enable access to SACLs.\nContains the error value\nContains the success value\nA result type alias for operations that may fail with a …\nRepresents a Windows API error.\nThe Windows error code (HRESULT) in hexadecimal format.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn optional human-readable error message, used when the …\nPrinter administration access right.\nA bitmask of generic access rights for ACL entries.\nChange service configuration access right.\nCreate subkey access right.\nRe-export commonly used Windows access rights.\nDelete access right.\nEnumerate subkeys access right.\nEnumerate service dependents access right.\nFile execute access.\nAll file access rights.\nAll registry key access rights.\nAll service access rights.\nAll printer access rights.\nFile object-specific access rights.\nRe-export commonly used Windows access rights.\nGeneric all access rights.\nRe-export commonly used Windows access rights.\nGeneric execute access right.\nRe-export commonly used Windows access rights.\nGeneric read access right.\nRe-export commonly used Windows access rights.\nGeneric write access right.\nInterrogate service access right.\nLimited printer management access right.\nA trait for types that can be converted to 32b mask\nNotify of registry key changes access right.\nPrinter object access rights.\nQuery registry key value access right.\nQuery service configuration access right.\nQuery service status access right.\nFile read access (includes read, execute, and read …\nRead access (combines QUERY, ENUMERATE, NOTIFY, and …\nPrinter read access right.\nRe-export commonly used Windows access rights.\nRead access control information right.\nRegistry key access rights.\nSet registry key value access right.\nRe-export commonly used Windows access rights.\nAll standard access rights.\nStart service access right.\nStop service access right.\nRe-export commonly used Windows access rights.\nSynchronize access right.\nWindows service access rights.\nBasic printer use access right.\nUser-defined control access right.\nFile write access (includes write, append, and write …\nWrite access (combines SET and CREATE).\nPrinter write access right.\nRe-export commonly used Windows access rights.\nWrite discretionary access control list (DACL) right.\nRe-export commonly used Windows access rights.\nWrite owner information right.\nConverts the mask to a raw <code>u32</code> value.\nCreates an access mask for execute operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an access mask for full control.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an access mask for read operations.\nCreates an access mask for write operations.\nA type alias for an unprivileged security descriptor.\nA Windows security descriptor containing security …\nConverts security descriptor into a string format\nReturns the DACL (Discretionary Access Control List) of …\nIndicates a security descriptor with a default DACL.\nIndicates a security descriptor that has a DACL. If this …\nReturns the argument unchanged.\nCreates a SecurityDescriptor from object name and object …\nCreates a SecurityDescriptor from object name and object …\nCreates a SecurityDescriptor from path to the “file …\nCreates a SecurityDescriptor from path to the “file …\nConverts a string-format security descriptor into a valid, …\nIndicates that the security identifier (SID) of the …\nReturns the primary group SID of the security descriptor.\nCalls <code>U::from(self)</code>.\nValidates a security descriptor.\nIndicates that the SID of the owner of the security …\nReturns the owner SID of the security descriptor.\nIndicates a security descriptor with a default SACL.\nIndicates a security descriptor that has a SACL.\nUpgrades this security descriptor to an elevated one that …\nTrait for types that can be converted to a <code>SidRef</code>.\nAn owned Security Identifier (SID).\nA borrowed reference to a Security Identifier (SID).\nReturns the raw pointer to the underlying SID structure.\nConverts this value to a <code>SidRef</code>.\nConverts this SID to a <code>Trustee</code> for use with Windows …\nConverts this SID to a <code>Trustee</code> for use with Windows …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a SID by looking up an account name.\nCreates a SID from raw byte data.\nCreates a <code>SidRef</code> from a raw Windows SID pointer.\nCreates a SID from its string representation.\nCreates a SID for a well-known security principal.\nCreates a SID for a well-known security principal, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the SID is empty (zero length).\nChecks if the SID is empty (zero length).\nChecks if this SID is valid.\nChecks if this SID is valid.\nReturns the length of the SID in bytes.\nReturns the length of the SID in bytes.\nLooks up the account name and domain for this SID.\nLooks up the account name and domain for this SID.\nConverts the SID to its string representation.\nConverts the SID to its string representation.\nConverts the SID to a byte vector.\nConverts the SID to a byte vector.\nThe result of looking up an account name from a SID (or …\nThe domain name (e.g., “BUILTIN”, “NT AUTHORITY”, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe account name (e.g., “Administrators”, “SYSTEM”…\nThe SID type indicating what kind of account this is …\nRepresents a security principal (trustee) that can be …\nReturns the argument unchanged.\nCreates a trustee from an account name.\nCreates a trustee from a SID reference.\nReturns the account name if this trustee was created from …\nCalls <code>U::from(self)</code>.\nSets the trustee type.")